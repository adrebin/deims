<?php

/**
 * @file
 * EML generation.
 *
 * Major features
 * - EML view mode and template for nodes
 * - API to generate a package ID for EML
 * - API to fetch the DOI of an EML
 * - Action that can be used in VBO to update data sets' DOI fields
 *
 * @todo Sean check all the pasta api urls and calls.
 * @todo Sean to trace the process for the API calls and test the logic.
 */

require_once dirname(__FILE__) . '/eml.field.inc';

/**
 * Implements hook_help().
 */
function eml_help($path, $arg) {
  // Show a warning on the 'EML' view mode sub-tab of 'Manage Display' pages
  // that re-ordering fields has no affect on the actual EML templates used.
  if (preg_match('/.*\/manage\/.*\/display\/eml/', $path)) {
    drupal_set_message(t('The ordering of these elements is hard-coded in the template files of the EML module. Re-ordering here will not change any output in EML.'), 'warning');
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function eml_entity_info_alter(array &$info) {
  // Add an 'EML' view mode to all possible entity types.
  foreach (array_keys($info) as $entity_type) {
    if (!empty($info[$entity_type]['view modes'])) {
      $info[$entity_type]['view modes']['eml'] = array(
        'label' => t('EML'),
        'custom settings' => FALSE,
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function eml_menu() {
  $items = array();

  $items['node/%node/eml'] = array(
    'page callback' => 'eml_output_node',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
    'file' => 'eml.pages.inc',
  );
  $items['admin/config/services/eml'] = array(
    'title' => 'EML',
    'description' => 'Configure EML settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eml_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'eml.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_view().
 *
 * When an entity is being rendered with the 'eml' view mode, convert the theme
 * and template being used to use our own EML theme/template.
 *
 * @see eml_preprocess_eml()
 */
function eml_entity_view($entity, $type, $view_mode, $langcode) {
  if ($view_mode == 'eml') {
    list(, , $bundle) = entity_extract_ids($type, $entity);
    $entity->content += array(
      '#entity' => $entity,
      '#bundle' => $bundle,
      '#theme' => "eml",
    );
  }
}

/**
 * Implements hook_theme().
 */
function eml_theme($existing, $type, $theme, $path) {
  $info['eml'] = array(
    'render element' => 'elements',
    'template' => 'eml',
    'path' => $path . '/templates',
  );

  // Add support for our additional EML templates.
  $info += drupal_find_theme_templates($info, '.tpl.php', drupal_get_path('module', 'eml') . '/templates');

  $info['eml_tag'] = array(
    'render element' => 'element',
  );

  // A theme wrapper for format_xml_elements().
  $info['eml_elements'] = array(
    'variables' => array('eml' => array()),
  );

  return $info;
}

function theme_eml_elements($variables) {
  return format_xml_elements($variables['eml']);
}

function theme_eml_tag($variables) {
  $element = &$variables['element'];
  if (isset($element['#value'])) {
    $element['#value'] = check_plain($element['#value']);
  }
  elseif ($children = element_children($element)) {
    $element['#value'] = '';
    foreach ($children as $key) {
      $element[$key] += array('#theme' => 'eml_tag');
      $element['#value'] .= drupal_render($element[$key]);
    }
  }
  return theme_html_tag($variables);
}

/**
 * Implements hook_node_presave().
 */
function eml_node_presave($node) {
  if ($node->type == 'data_set' && empty($node->nid)) {
    // For new datasets, set the EML revision ID to 1 and calculate it's hash.
    $dataset = new EMLDataSet($node);
    if (!$dataset->getEMLRevisionID()) {
      $dataset->setEMLRevisionID(1);
    }
    $hash = $dataset->calculateEMLHash();
    $dataset->setEMLHash($hash);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * @todo Figure out if we should increment the revision automatically
 * when a published revision is created?
 */
// function eml_workbench_moderation_transition($node, $previous_state, $new_state) {
//   if ($node->type == 'data_set' && $new_state == 'published') {
//   }
// }

/**
 * Implements hook_node_view().
 */
function eml_node_view($node, $view_mode, $langcode) {
  if ($view_mode != 'eml') {
    return;
  }

  switch ($node->type) {
    case 'data_set':
      // if ($items = field_get_items('node', $node, 'field_methods')) {
      //   foreach ($items as $item) {
      //     $method = array();
      //     $method['section']['para']['literalLayout'] = strip_tags($item['safe_value']);
      //     $node->eml_elements['methods']['methodStep'][] = array(
      //       'key' => 'description',
      //       'value' => $method,
      //     );
      //   }
      // }
      // if ($items = field_get_items('node', $node, 'field_instrumentation')) {
      //   $node->eml_elements['methods']['instrumentation'] = strip_tags($items[0]['safe_value']);
      // }

      // Join all taxonomy fields into one content array to output in the
      // template.
      $node->content['keywordSets'] = array();
      foreach (element_children($node->content) as $key) {
        if (isset($node->content[$key]['#field_type'])
            && $node->content[$key]['#field_type'] == 'taxonomy_term_reference'
            && $node->content[$key]['#formatter'] == 'taxonomy_eml_keywordset') {
          $node->content['keywordSets'][] = $node->content[$key];
        }
      }

      $node->EmlDataSet = new EmlDataSet($node);
      if ($metadata = $node->EmlDataSet->getCustomUnitMetadata()) {
        $node->content['additionalMetadata'] = $metadata;
      }
      break;
  }
}

/**
 * Implements hook_date_format_types().
 */
function eml_date_format_types() {
  return array(
    'eml_yeardate' => t('EML yearDate'),
  );
}

/**
 * Implements hook_date_formats().
 */
function eml_date_formats() {
  return array(
    array(
      'type' => 'eml_yeardate',
      'format' => 'Y-m-d',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for eml.tpl.php.
 */
function template_preprocess_eml(&$variables, $hook) {
  $variables['entity'] = $variables['elements']['#entity'];
  $entity = $variables['entity'];
  $entity_type = $variables['elements']['#entity_type'];
  $bundle = $variables['elements']['#bundle'];

  $label = entity_label($entity_type, $entity);
  $uri = entity_uri($entity_type, $entity);
  $variables['url'] = url($uri['path'], array('absolute' => TRUE) + $uri['options']);
  $variables['label'] = check_plain($label);

  $variables['language'] = check_plain($GLOBALS[LANGUAGE_TYPE_CONTENT]->name);
  $variables['pubPlace'] = check_plain(variable_get('site_name', 'Drupal'));
  $variables['station'] = check_plain(variable_get('station_acronym', 'STATION'));
  $variables['data_policies'] = check_plain(strip_tags(variable_get('eml_data_policies', '')));

  $variables['namespaces_array'] = array(
    'xmlns:eml' => "eml://ecoinformatics.org/eml-2.1.0",
    'xmlns:stmml' => "http://www.xml-cml.org/schema/stmml-1.1",
    'xmlns:ds' => "eml://ecoinformatics.org/dataset-2.1.0",
    'xmlns:xs' => "http://www.w3.org/2001/XMLSchema",
    'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance",
    'xsi:schemaLocation' => "eml://ecoinformatics.org/eml-2.1.0 http://nis.lternet.edu/schemas/EML/eml-2.1.0/eml.xsd",
  );

  if ($entity_type == 'node' && $variables['elements']['#bundle'] == 'data_set') {
    $variables['attributes_array'] += array(
      // The EmlDataSet property is loaded in eml_node_view().
      'packageId' => $entity->EmlDataSet->getPackageID(),
      'system' => "knb",
    );
    $variables['pubDate'] = format_date($entity->created, 'eml_yeardate');
  }

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];

    // Remove the field wrappers and classes so we just get native output.
    if (isset($variables['content'][$key]['#theme']) && $variables['content'][$key]['#theme'] == 'field') {
      unset($variables['content'][$key]['#theme']);
    }
  }

  // Ensure that all the fields for this entity are available, even if empty.
  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    if (!isset($variables['content'][$instance['field_name']])) {
      $variables['content'][$instance['field_name']] = '';
    }
  }

  // Add template suggestions to use, starting with the least preferred, and
  // ending with the one to try first if it exists. The last one should be the
  // most specific.
  $variables['theme_hook_suggestions'][] = 'eml';
  $variables['theme_hook_suggestions'][] = "eml__{$entity_type}__{$bundle}";
}

/**
 * Implements hook_process_HOOK() for eml.tpl.php.
 */
function template_process_eml(array &$variables) {
  $variables['namespaces'] = $variables['namespaces_array'] ? drupal_attributes($variables['namespaces_array']) : '';
}

/**
 * Implements hook_form_FORM_ID_alter() for install_configure_form().
 */
function eml_form_install_configure_form_alter(&$form, $form_state) {
  $form['eml'] = array(
    '#type' => 'fieldset',
    '#title' => t('EML'),
    '#collapsible' => FALSE,
  );
  $form['eml']['station_acronym'] = array(
    '#type' => 'textfield',
    '#title' => t('Station acronym'),
    '#default_value' => variable_get('station_acronym', ''),
    '#required' => TRUE,
    '#size' => 10,
    '#maxlength' => 20,
  );
  $form['eml']['eml_package_id_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Package ID pattern'),
    '#description' => t('This field supports tokens.'),
    '#default_value' => variable_get('eml_package_id_pattern', 'knb-lter-[site:station-acronym].[node:field_data_set_id].[node:field_eml_revision_id]'),
    '#required' => TRUE,
    '#size' => 100,
    '#element_validate' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['eml']['eml_data_policies'] = array(
    '#type' => 'textarea',
    '#title' => t('Data policies text'),
    '#default_value' => variable_get('eml_data_policies', ''),
  );

  $form['#submit'][] = 'eml_form_install_configure_form_submit';
}

function eml_form_install_configure_form_submit($form, &$form_state) {
  variable_set('station_acronym', $form_state['values']['station_acronym']);
  variable_set('eml_package_id_pattern', $form_state['values']['eml_package_id_pattern']);
  variable_set('eml_data_policies', $form_state['values']['eml_data_policies']);
}


// ----------------------------------------------------------------------------
// Package ID API
// ----------------------------------------------------------------------------

/**
 * Calculate the package ID of a data set.
 *
 * @deprecated Use EmlDataSet::getPackageID().
 *
 * @param $node
 *   A data set node object.
 *
 * @return string
 *   The package ID of the data set in the format of scope.identifier.revision.
 */
function eml_dataset_get_package_id($node) {
  $pattern = variable_get('eml_package_id_pattern', 'knb-lter-[site:station-acronym].[node:field_data_set_id].[node:field_eml_revision_id]');
  return drupal_strtolower(token_replace($pattern, array('node' => $node), array('clear' => TRUE, 'callback' => 'eml_cleanup_package_id_tokens')));
}

function eml_dataset_is_valid_package_id($package_id) {
  return preg_match('/^([\w-]+)\.(\d+)\.(\d+)$/', $package_id);
}

/**
 * Token replacement callback to remove leading zeros from token values.
 *
 * This is necessary since it is very likely that [node:field_data_set_id]
 * has leading zeros.
 */
function eml_cleanup_package_id_tokens(array &$replacements, array $data, array $options) {
  foreach ($replacements as &$replacement) {
    if (drupal_strlen($replacement) > 1) {
      $replacement = ltrim($replacement, '0');
    }
  }
}

// ----------------------------------------------------------------------------
// Cron queues
// ----------------------------------------------------------------------------

/**
 * Implements hook_cron_queue_info().
 */
function eml_cron_queue_info() {
  $info['eml_validation_report'] = array(
    'worker callback' => 'eml_validation_report_queue_process',
    'time' => 20,
  );

  return $info;
}

/**
 * Implements callback_cron_queue_info_worker().
 */
function eml_validation_report_queue_process($data) {
  return EmlValidationReportQueue::process($data);
}

// ----------------------------------------------------------------------------
// Actions
// ----------------------------------------------------------------------------

/**
 * Implements hook_action_info().
 */
function eml_action_info() {
  $info['eml_action_dataset_update_doi'] = array(
    'type' => 'node',
    'label' => t('Fetch DOI from PASTA'),
    'configurable' => FALSE,
    'triggers' => array(),
  );
  $info['eml_action_dataset_enqueue_validation_report'] = array(
    'type' => 'node',
    'label' => t('Enqueue to fetch EML validation report'),
    'configurable' => FALSE,
    'triggers' => array(),
  );

  return $info;
}

/**
 * Implements callback_action_info().
 *
 * Action callback to retrieve a data set's DOI and save it in field_doi.
 */
function eml_action_dataset_update_doi($node) {
  if ($node->type != 'data_set') {
    return;
  }

  try {
    $dataset = new EmlDataSet($node);
    if ($doi = $dataset->fetchDOI()) {
      $node->field_doi[LANGUAGE_NONE][0]['value'] = $doi;
      EntityHelper::updateFieldValues('node', $node);
      $uri = entity_uri('node', $node);
      $link = l(t('View data set'), $uri['path'], $uri['options']);
      watchdog('action', 'Updated DOI for %title to @doi.', array('%title' => $node->title, '@doi' => $doi), WATCHDOG_INFO, $link);
    }
  }
  catch (Exception $exception) {
    // @todo Should we set the DOI field to be empty here?
    watchdog_exception('eml', $exception);
  }
}

/**
 * Implements callback_action_info().
 *
 * Enqueues a data set node to fetch its validation report.
 */
function eml_action_dataset_enqueue_validation_report($node) {
  if ($node->type != 'data_set') {
    return;
  }

  try {
    $dataset = new EmlDataSet($node);
    if ($transaction = $dataset->fetchValidationReportTransaction()) {
      $data = array(
        'nid' => $node->nid,
        'transaction' => $transaction,
        'created' => REQUEST_TIME,
      );
      EmlValidationReportQueue::get()->createItem($data);
    }
  }
  catch (Exception $exception) {
    watchdog_exception('eml', $exception);
  }
}
